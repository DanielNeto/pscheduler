#!/usr/bin/python
#
# Run a test.  Just the test spec is provided on stdin.
#


import icmperror
import pscheduler
import re

input = pscheduler.json_load(exit_on_error=True);
#input = {"test": {"type": "trace", "spec": {"dest": "10.0.1.17", "schema": 1}}, "participant-data": [{}], "schedule": {"duration": "PT1M11S", "start": "2016-09-02T14:55:35-04:00"}, "participant": 0, "schema": 1}

log = pscheduler.Log(prefix='tracepath', quiet=True)

# TODO: Validate the input
# TODO: Verify can-run

participant = input['participant']

log.debug("Participant %d", participant)
if participant != 0:
    pscheduler.succeed_json( {
            'succeeded': False,
            'diags': None,
            'error': "Invalid participant %d" % participant,
            'result': None
            } )

spec = input['test']['spec']




#
# Figure out how to invoke the program
#

argv = [
    'bwtraceroute',
    '-T', 'tracepath',
    '-y', 'a' #no lookups
    ]


#
# IP Version
#

# TODO: Determine if the destination address is IPv4 or IPv6 if it's
# not a DNS name.

try:
    ipversion = spec['ip-version']
    # TODO: Make sure this is compatible with the destination address
    argv.append('-' + str(ipversion))
except KeyError:
    pass
    
try:
    length = spec['length']
    argv.append('-l')
    argv.append(str(length))
except KeyError:
    pass

#
# Source
#

try:
    source = spec['source']
    # TODO: Needs to be same IP type as dest
    argv.append('-s')
    argv.append(source)
except KeyError:
    pass

#
# Destination 
#

argv.append('-c')
argv.append(spec['dest'])

#
# Run the test
#
status, stdout, stderr = pscheduler.run_program( argv, timeout = 55 )

if status != 0:
    pscheduler.succeed_json( {
            'succeeded': False,
            'diags': None,
            'error': stderr,
            'result': None
            } )



#
# Dissect the results
#

err_lines = stderr.split("\n")
for err_line in err_lines:
    if err_line.strip().startswith("bwctl: Unable to initiate peer handshake"):
        pscheduler.succeed_json({"succeeded": False, "error": err_line.strip()})
    elif err_line.strip().startswith("bwctl: Unable to connect"):
        pscheduler.succeed_json({"succeeded": False, "error": err_line.strip()})
        
traced_hops = []
ips = []
last_hop = 0

ttl_re = re.compile('^(\d*)\??:');
no_reply_re = re.compile('no reply');
reached_re = re.compile('reached');
rtt_re = re.compile('([0-9]+\.[0-9]+)ms');
mtu_re = re.compile('pmtu ([0-9]+)');
error_re = re.compile('!(\w+)$');
path_mtu = None
for line in stdout.split('\n'):
    line = re.sub('\s+', ' ', line).strip()
    matches = ttl_re.match(line)
    if matches is None:
        continue
    ttl =  int(matches.group(1))

    log.debug("LINE %s", line)

    hop = {}
    # Repeats of a hop usually contain more info for first, but replace any repeat info
    if ttl == len(traced_hops):
        hop = traced_hops.pop()

    # No reply means no results
    if no_reply_re.search(line):
        traced_hops.append(hop)
        continue

    # IP.  We forced tracepath to behave this way.
    line_parts = line.split(' ')
    ip = line_parts[1]
    hop['ip'] = ip
    ips.append(ip)
    log.debug("  IP %s", ip)

    # RTT (ms)
    matches = rtt_re.search(line)
    if matches:
        rtt = float(matches.group(1)) / 1000.0
        hop['rtt'] = 'PT%fS' % rtt

    # Path MTU (bytes) - update if changes, otherwise carry over from prev hop
    matches = mtu_re.search(line)
    if matches:
        path_mtu = int(matches.group(1))
    if path_mtu is not None:
         hop['mtu'] = path_mtu

    # Search for errors
    matches = error_re.search(line)
    if matches:
        hop['error'] = icmperror.translate(matches.group(1))

    traced_hops.append(hop)


# Spit out the results

pscheduler.succeed_json( {
    'succeeded': True,
    'diags': stdout,
    'error': None,
    'result': {
        'schema': 1,
        'succeeded': True,
        'paths': [
            traced_hops
        ]
    }
} )
