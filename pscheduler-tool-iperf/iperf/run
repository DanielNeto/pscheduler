#!/usr/bin/python
#
# Run an iperf test
#

import datetime
import logging
import json
import pscheduler
import re
import tempfile
import shutil
import sys
import time
from iperf_defaults import *


# track when this run starts
start_time = datetime.datetime.now()

logger = pscheduler.Log()

logger.debug("starting iperf tool")

# parse JSON input
input = pscheduler.json_load(exit_on_error=True)
try:
    participant = input['participant']
    participant_data = input['participant-data']
    test_spec = input['test']['spec']
    duration = pscheduler.iso8601_as_timedelta(input['schedule']['duration'])
except KeyError as e:
    pscheduler.fail("Missing required key in run input: %s" % e)
except:
    pscheduler.fail("Error parsing run input: %s" % sys.exc_info()[0])
    
results = { 'succeeded': False }


def run_client():    
    time.sleep(DEFAULT_WAIT_SLEEP) #wait for server to boot

    iperf_args = ['/usr/bin/iperf']

    iperf_args.append('-c')
    iperf_args.append(participant_data['receiver'])

    logger.debug("Running command: %s" % " ".join(iperf_args))

    try:
        status, stdout, stderr = pscheduler.run_program(iperf_args)
    except Exception as e:
        logger.error("iperf failed to complete execution: %s" % e)
        pscheduler.fail("The iperf command failed during execution. See server logs for more details.")
    
    #see if command completed successfully
    logger.debug("iperf returned status %d" % status)

    if status:
        iperf_error = ''
        for line in stderr:
            iperf_error += line.rstrip().lstrip() + " "
        pscheduler.fail("iperf returned an error: %s" % iperf_error)
        
    # TODO Parse output
    for line in stdout:
        logger.debug(line)
        pass
    
    results['succeeded'] = True


def run_server():

    #init command
    iperf_args = ['/usr/bin/iperf', '-s' ]
    
    logger.debug("Running command: %s" % " ".join(iperf_args))
    try:
        status, stdout, stderr = pscheduler.run_program(iperf_args,
                                                        timeout = pscheduler.timedelta_as_seconds(duration - (datetime.datetime.now() - start_time)),
                                                        timeout_ok = True)
    except Exception as e:
        logger.error("iperf failed to complete execution: %s" % e);
        pscheduler.fail("The iperf command failed during execution. See server logs for more details.")
    
    #check if server failed
    if status:
        iperf_error = ''
        for line in stderr:
            iperf_error += line.rstrip().lstrip() + " "
        pscheduler.fail("iperf returned an error: %s" % iperf_error)
    
    #log stdout in debug mode
    for line in stdout:
        logger.debug(line)
        
    results['succeeded'] = True



#determine whether we are the client or server mode for iperf
if participant == 0:
    run_server()
elif participant == 1:
    run_client()
else:
    pscheduler.fail("Invalid participant.")

logger.debug("Results: %s" % results)
pscheduler.succeed_json(results)
