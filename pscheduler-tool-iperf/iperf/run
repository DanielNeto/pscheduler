#!/usr/bin/python
#
# Run an iperf test
#

import datetime
import logging
import json
import pscheduler
import re
import tempfile
import shutil
import sys
import time
import iperf_parser
import traceback
from iperf_defaults import *

# track when this run starts
start_time = datetime.datetime.now()

logger = pscheduler.Log(prefix='tool-iperf')

logger.debug("starting iperf tool")

# parse JSON input
input = pscheduler.json_load(exit_on_error=True)

logger.debug("Input is %s" % input)

try:
    participant = input['participant']
    participant_data = input['participant-data']
    test_spec = input['test']['spec']
    duration = pscheduler.iso8601_as_timedelta(input['schedule']['duration'])
except KeyError as e:
    pscheduler.fail("Missing required key in run input: %s" % e)
except:
    pscheduler.fail("Error parsing run input: %s" % sys.exc_info()[0])


def run_client():    

    logger.debug("Waiting %s sec for server on other side to start" % DEFAULT_WAIT_SLEEP)

    time.sleep(DEFAULT_WAIT_SLEEP) #wait for server to start on other side

    iperf_args = ['/usr/bin/iperf']

    # who to connect to
    destination = test_spec['destination']
    
    # iperf has no inherent ability to force v4 or v6, so we do it here
    if test_spec.has_key('force-ipv4'):
        destination = pscheduler.dns_resolve(destination, ip_version=4)
        
        logger.info("Resolved %s to %s" % (test_spec["destination"], destination))
                    
        if destination == None:
            pscheduler.fail("Unable to resolve %s to an IPv4 address" % test_spec["destination"])

    elif test_spec.has_key('force-ipv6'):
        destination = pscheduler.dns_resolve(destination, ip_version=6)
                    
        logger.info("Resolved %s to %s" % (test_spec["destination"], destination))

        if destination == None:
            pscheduler.fail("Unable to resolve %s to an IPv6 address" % test_spec["destination"])
            


    iperf_args.append('-c')
    iperf_args.append(destination)

    # duration
    iperf_args.append('-t')
    iperf_args.append(test_spec.get('duration', DEFAULT_DURATION))

    if test_spec.has_key('interval') and test_spec['interval'] != None:
        iperf_args.append('-i')
        iperf_args.append(test_spec['interval'])

    if test_spec.has_key('parallel') and test_spec['parallel'] != None:
        iperf_args.append('-P')
        iperf_args.append(test_spec['parallel'])

    if test_spec.has_key('window-size') and test_spec['window-size'] != None:
        iperf_args.append('-w')
        iperf_args.append(test_spec['window-size'])

    if test_spec.has_key('mss') and test_spec['mss'] != None:
        iperf_args.append('-m')
        iperf_args.append(test_spec['mss'])

    if test_spec.has_key('bandwidth') and test_spec['bandwidth'] != None:
        iperf_args.append('-u') # iperf only support UDP bandwidth throttling, this is checked for earlier too
        iperf_args.append('-b')
        iperf_args.append(test_spec['bandwidth'])

    if test_spec.has_key('buffer-length') and test_spec['buffer-length'] != None:
        iperf_args.append('-l')
        iperf_args.append(test_spec['buffer-length'])

    
    # join and run_program want these all to be string types, so
    # just to be safe cast everything in the list to a string
    iperf_args = map(lambda x: str(x), iperf_args)
      
    logger.info("Running command: %s" % " ".join(iperf_args))

    try:
        status, stdout, stderr = pscheduler.run_program(iperf_args)
    except Exception as e:
        logger.error("iperf failed to complete execution: %s" % e)
        pscheduler.fail("The iperf command failed during execution. See server logs for more details.")
    
    #see if command completed successfully
    logger.debug("iperf returned status %d" % status)

    if status:
        iperf_error = ''
        for line in stderr:
            iperf_error += line.rstrip().lstrip() + " "
        pscheduler.fail("iperf returned an error: %s" %iperf_error)

    logger.debug("Stdout = %s" % stdout)
    logger.debug("Stderr = %s" % stderr)

    lines = stdout.split("\n")    

    logger.debug("Lines are %s " % lines)

    results = iperf_parser.parse_output(lines)
    results['diag'] = stdout

    return results

def run_server():

    #init command
    iperf_args = ['/usr/bin/iperf', '-s' ]
    
    logger.info("Running command: %s" % " ".join(iperf_args))

    try:
        status, stdout, stderr = pscheduler.run_program(iperf_args,
                                                        timeout = pscheduler.timedelta_as_seconds(duration - (datetime.datetime.now() - start_time)),
                                                        timeout_ok = True)
    except Exception as e:
        logger.error("iperf failed to complete execution: %s" % e);
        pscheduler.fail("The iperf command failed during execution. See server logs for more details.")

    log_debug("Return = %s" % status)
    
    # For whatever reason, iperf doesn't always exit with the right code
    # in the event of failures so we can also look to see if anything
    # showed up in stderr
    if status or stderr:
        iperf_error = ''
        for line in stderr:
            iperf_error += line.rstrip().lstrip() + " "
        pscheduler.fail("iperf returned an error: %s" % iperf_error)
    
    #log stdout in debug mode
    for line in stdout:
        logger.debug(line)
          
    return {"succeeded": True}



#determine whether we are the client or server mode for iperf
results = {}
try:
    if participant == 0:
        results = run_client()
    elif participant == 1:
        results = run_server()
    else:
        pscheduler.fail("Invalid participant.")
except Exception as ex:
    _, _, ex_traceback = sys.exc_info()
    if ex_traceback is None:
        ex_traceback = ex.__traceback__
    tb_lines = [ line.rstrip('\n') for line in
                 traceback.format_exception(ex.__class__, ex, ex_traceback)]
    logger.debug(tb_lines)
    logger.error("Exception %s" % ex);

logger.info("Results: %s" % results)

pscheduler.succeed_json(results)
