#!/usr/bin/python
#
# Send an SNMP trap to a destination.
#

# this works with raw pscheduler output, no transforms
# NEEDS: error handling

import pscheduler
import syslog
from pysnmp.hlapi import *
import re

# build object for snmp engine
def build_object(oid):

    if re.match(r'^((\.\d)|\d)+(\.\d+)*$', oid) is None:
        try:
            temp = oid.split('::')
            args = [temp[0]]
            temp = temp[1].split('.')
            args.extend(temp)
            try:
                obj_id = ObjectIdentity(args[0], args[1], args[2])
            except IndexError:
                obj_id = ObjectIdentity(args[0], args[1])
        except IndexError:
            pscheduler.fail('Incomplete/Invalid OID')

    else:
        obj_id = ObjectIdentity(item)

    return obj_id

# only dealing with enterpprise specific OIDs
def get_generator(data, metrics, oids):

    # trap type: 6 with specific type
    trap_type = '.'.join((data['enterprise-oid'], str(data['specific-type'])))
    notification = NotificationType(ObjectIdentity(trap_type))

    # uptime override
    try:
        uptime = data['uptime']
        notification.addVarBinds(('1.3.6.1.2.1.1.3.0', int(data['uptime'])))
    except KeyError:
        pass

    # agent override
    try:
        agent = data['agent']
        notification.addVarBinds(('1.3.6.1.6.3.18.1.3.0', agent))
    except KeyError:
        pass

    # enterprise OID override
    try:
        ent_oid = data['enterprise-oid']
        notification.addVarBinds(('1.3.6.1.6.3.1.1.4.3.0', ent_oid))
    except KeyError:
        pass

    # add managed object information
    for enum, item in enumerate(metrics):
        notification.addVarBinds((build_object(oids[enum]), item['value']))

	return sendNotification(SnmpEngine(),
        					CommunityData(data['_community']),
        					UdpTransportTarget((data['dest'], 162)),
        					ContextData(),
        					'trap',
        					notification
    						)


json = pscheduler.json_load(exit_on_error=True, max_schema=1)


g = get_generator(json['data'], json['result']['data'], json['result']['oid'])
errorIndication, errorStatus, errorIndex, varBinds = next(g)


if errorIndication:
    succeeded = False
    data = None
    error = "snmptrap returned an error: %s" % errorIndication
else:
    succeeded = True
    data = None
    error = None

pscheduler.succeed_json({'succeeded': succeeded,
						 'data': data,
						 'error': error})