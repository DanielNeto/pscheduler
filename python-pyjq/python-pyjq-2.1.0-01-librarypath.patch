diff -rupN pyjq-2.1.0/pyjq.py pyjq-2.1.0-patched/pyjq.py
--- pyjq-2.1.0/pyjq.py	2017-06-28 00:39:47.000000000 -0400
+++ pyjq-2.1.0-patched/pyjq.py	2017-08-16 12:49:17.000000000 -0400
@@ -8,11 +8,19 @@ import _pyjq
 __all__ = []
 
 
-def compile(script, vars={}):
+def compile(script, vars={}, library_paths=None):
     """
     Compile a jq script, retuning a script object.
+
+    library_paths is an array of strings that defines the module
+    search path.  Semantics for these paths are the same as if
+    provided to the jq command-line program's -L switch except that ~
+    and $ORIGIN are not expanded.  If not provided, JQ's default list
+    will be used.
     """
-    return _pyjq.Script(script.encode('utf-8'), vars=vars)
+
+    return _pyjq.Script(script.encode('utf-8'), vars=vars,
+                        library_paths=library_paths)
 
 
 def default_opener(url):
@@ -40,33 +48,33 @@ def _get_value(value, url, opener):
     return value
 
 
-def all(script, value=None, vars={}, url=None, opener=default_opener):
+def all(script, value=None, vars={}, url=None, opener=default_opener, library_paths=None):
     """
     Transform value by script, returning all results as list.
     """
-    return compile(script, vars).all(_get_value(value, url, opener))
+    return compile(script, vars, library_paths).all(_get_value(value, url, opener))
 
 
-def apply(script, value=None, vars={}, url=None, opener=default_opener):
+def apply(script, value=None, vars={}, url=None, opener=default_opener, library_paths=None):
     """
     Transform value by script, returning all results as list.
     """
-    return all(script, value, vars, url, opener)
+    return all(script, value, vars, url, opener, library_paths)
 
 apply.__doc__ = all.__doc__
 
 
-def first(script, value=None, default=None, vars={}, url=None, opener=default_opener):
+def first(script, value=None, default=None, vars={}, url=None, opener=default_opener, library_paths=None):
     """
     Transform object by jq script, returning the first result.
     Return default if result is empty.
     """
-    return compile(script, vars).first(_get_value(value, url, opener), default)
+    return compile(script, vars, library_paths).first(_get_value(value, url, opener), default)
 
 
-def one(script, value=None, vars={}, url=None, opener=default_opener):
+def one(script, value=None, vars={}, url=None, opener=default_opener, library_paths=None):
     """
     Transform object by jq script, returning the first result.
     Raise ValueError unless results does not include exactly one element.
     """
-    return compile(script, vars).one(_get_value(value, url, opener))
+    return compile(script, vars, library_paths).one(_get_value(value, url, opener))
diff -rupN pyjq-2.1.0/_pyjq.pyx pyjq-2.1.0-patched/_pyjq.pyx
--- pyjq-2.1.0/_pyjq.pyx	2017-06-28 00:39:47.000000000 -0400
+++ pyjq-2.1.0-patched/_pyjq.pyx	2017-08-16 12:49:17.000000000 -0400
@@ -3,6 +3,8 @@
 Python binding for jq
 """
 
+import os
+
 from collections import OrderedDict
 import six
 
@@ -73,6 +75,7 @@ cdef extern from "jq.h":
     ctypedef void (*jq_err_cb)(void *, jv)
 
     jq_state *jq_init()
+    void jq_set_attr(jq_state *, jv, jv)
     void jq_teardown(jq_state **)
     bint jq_compile_args(jq_state *, const char* str, jv args)
     void jq_start(jq_state *, jv value, int flags)
@@ -144,12 +147,15 @@ cdef void Script_error_cb(void* x, jv er
     Script._error_cb(<object>x, err)
 
 
+
+
 cdef class Script:
     'Compiled jq script object'
     cdef object _errors
     cdef jq_state* _jq
 
-    def __init__(self, const char* script, vars={}):
+    def __init__(self, const char* script, vars={},
+                 library_paths=None):
         self._errors = []
         self._jq = jq_init()
         if not self._jq:
@@ -161,6 +167,34 @@ cdef class Script:
             for k, v in vars.items()
         ])
 
+
+        # Figure out where to find libraries.
+
+        if library_paths is None:
+
+            library_paths = [os.path.expanduser("~/.jq")]
+
+            try:
+                origin = filter(
+                    lambda p: os.access(os.path.join(p, "jq"), os.X_OK),
+                    os.environ["PATH"].split(os.pathsep)
+                )[0]
+                library_paths.extend([
+                    "%s/%s" % (origin, path)
+                    for path in ["../lib/jq", "lib"]
+                ])
+            except IndexError:
+                # If there's no jq binary, don't do anything relative to it.
+                pass
+
+        # This must be initialized even if empty or imports will fail
+        # an assertion in the jq library.
+        jq_set_attr(self._jq,
+                    pyobj_to_jv("JQ_LIBRARY_PATH"),
+                    pyobj_to_jv(library_paths)
+        )
+
+
         if not jq_compile_args(self._jq, script, args):
             raise ValueError("\n".join(self._errors))
 
