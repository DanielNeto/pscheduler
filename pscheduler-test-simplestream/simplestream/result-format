#!/usr/bin/python
#
# Format a result
#

import jsontemplate
import pscheduler
import sys

try:
   format = sys.argv[1]
except IndexError:
   format = 'text/plain'

json = pscheduler.json_load(exit_on_error=True)
# TODO: Validate the input

if format == 'text/plain':

   template = """
Dawdled ......... {.section dawdled}{dawdled}{.or}Not Reported{.end}
Text Sent ....... {.section sent}{sent}{.or}Not Reported{.end}
Text Received ... {.section received}{received}{.or}Not Reported{.end}
Elapsed Time .... {.section elapsed-time}{elapsed-time}{.or}Not Reported{.end}
   """

elif format == 'text/html':

   template = """
<table border="0">

<tr><td><b>Dawdled</b></td><td>
{.section dawdled}{dawdled}{.or}<i>Not Reported</i>{.end}
</td></tr>

<tr><td><b>Text Sent</b></td><td>
{.section sent}{sent}{.or}<i>Not Reported</i>{.end}
</td></tr>

<tr><td><b>Text Received</b></td><td>
{.section received}{received}{.or}<i>Not Reported</i>{.end}
</td></tr>

<tr><td><b>Elapsed Time</b></td><td>
{.section elapsed-time}{elapsed-time}{.or}<i>Not Reported</i>{.end}
</td></tr>

</table>
   """

else:

   pscheduler.fail("Unsupported format '%s'" % format)


# TODO: Should probably handle exceptions in a nicer way.
print jsontemplate.expand(template, json).strip()
