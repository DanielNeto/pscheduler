#!/usr/bin/python
#
# Convert command-line options to a test specification
#

import optparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if type(json_args) != list:
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if type(arg) not in (unicode, str, int, float):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

opt_parser = pscheduler.FailingOptionParser(epilog=
"""Examples:

  task dns --query example.net --record soa
    text

"""
)


opt_parser.add_option("--host",
                      help="Host to run the test",
                      action="store", type="string",
                      dest="host")

opt_parser.add_option("--host-node",
                      help="Host to run the test",
                      action="store", type="string",
                      dest="host_node")

opt_parser.add_option("--dest",
                      help="Destination that will be queried",
                      action="store", type="string",
                      dest="dest")
                    
opt_parser.add_option("--version",
                      help="Version of SNMP to be used",
                      action="store", type="string",
                      dest="version")

opt_parser.add_option("--community",
                      help="Community string",
                      action="store", type="string",
                      dest="community")

opt_parser.add_option("--oid",
                      help="OID",
                      action="store", type="string",
                      dest="oid")

opt_parser.add_option("--op",
                      help="Option for SNMP",
                      action="store", type="string",
                      dest="op")

opt_parser.add_option("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type="string",
                      dest="timeout")

(options, remaining_args) = opt_parser.parse_args(args)

if len(remaining_args) != 0:
   pscheduler.fail("Unusable arguments: %s" % " ".join(remaining_args))


result = { 'schema': 1 }


if options.host is not None:
   result['host'] = options.host

if options.host_node is not None:
   result['host-node'] = options.host_node

if options.op is not None:
   result['op'] = options.op

if options.dest is not None:
   result['dest'] = options.dest

if options.community is not None:
   result['community'] = options.community

if options.version is not None:
   result['version'] = options.version

if options.oid is not None:
   result['oid'] = options.oid

if options.timeout is not None:
   result['timeout'] = options.timeout


pscheduler.succeed_json(result)
