#!/usr/bin/python
#
# Determine if this tool can run a test based on a test spec.
#

import datetime
import sys

import pscheduler

logger = pscheduler.Log(prefix='tool-bwctliperf3', quiet=True)


json = pscheduler.json_load(exit_on_error=True)

logger.debug("can-run for %s" % json)

if not json.get('type'):
    pscheduler.fail('Missing test type')

if json['type'] != 'throughput':
    pscheduler.fail('Unsupported test type')

if not json.get('spec'):
    pscheduler.fail('Missing test spec')

test_spec = json['spec']

try:
    source = test_spec['source']
except KeyError:
    source = None

try: 
    destination = test_spec['dest']
except KeyError:
    pscheduler.fail("Missing dest argument in spec")

unsupported_options = [ 'congestion', 'zero-copy', 'flow-label', 'client-cpu-affinity', 'server-cpu-affinity', 'reverse' ]
for unsupported_option in unsupported_options:
    if test_spec.has_key(unsupported_option):
        pscheduler.fail("BWCTL does not support %s" % unsupported_option)


# This digs up everything we can on the hosts involved in a
# time-predictable way.
has = pscheduler.api_has_services([source, destination], timeout=3)

src_has_psc = has[source]["pscheduler"]
dst_has_psc = has[destination]["pscheduler"]

if src_has_psc and dst_has_psc:
    pscheduler.fail("Both sides have pscheduler, no need for BWCTL")

if not has[destination]["bwctl"]:
    logger.debug("No BWCTL at destination")
    pscheduler.fail("No BWCTL on %s" % destination)

logger.debug("can-run succeeded") 
pscheduler.succeed()
