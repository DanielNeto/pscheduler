#!/usr/bin/python
#
# Determine if this tool can run a test based on a test spec.
#

import datetime
import sys

import pscheduler

logger = pscheduler.Log(prefix='tool-bwctl')


def has_pscheduler(address):
    #null participant means localhost, which means has psc by definition
    if address is None:
        return True
    
    #test query for /tests...oh the irony
    status, raw_spec = pscheduler.url_get(
                                            pscheduler.api_url( host=address,
                                                                path='/tests'),
                                            throw=False
                                        )
    return status == 200
    

json = pscheduler.json_load(exit_on_error=True)

logger.info("can-run for %s" % json)

if not json.get('type'):
    pscheduler.fail('Missing test type')

if json['type'] != 'throughput':
    pscheduler.fail('Unsupported test type')

if not json.get('spec'):
    pscheduler.fail('Missing test spec')

test_spec = json['spec']

try:
    source = test_spec['source']
except KeyError:
    source = None

try: 
    destination = test_spec['destination']
except KeyError:
    pscheduler.fail("Missing destination argument in spec")

unsupported_options = [ 'congestion', 'zero-copy', 'flow-label', 'cpu-affinity' ]
for unsupported_option in unsupported_options:
    if test_spec.has_key(unsupported_option):
        pscheduler.fail("BWCTL does not support " . unsupported_option)
        
src_has_psc = has_pscheduler(source)
dst_has_psc = has_pscheduler(destination)
if src_has_psc and dst_has_psc:
    pscheduler.fail("Both sides have pscheduler, no need for BWCTL")
 
logger.debug("can-run succeeded")

pscheduler.succeed()
