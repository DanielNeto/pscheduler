#!/usr/bin/python
#
# Operate all on-boot and periodic functions in the database.
#

import datetime
import errno
import optparse
import pscheduler
import psycopg2
import psycopg2.extensions
import sys
import time

#
# Gargle the arguments
#

opt_parser = optparse.OptionParser()
opt_parser.add_option("-d", "--dsn",
                      help="Database connection string, prefix with @ to read from file",
                      action="store", type="string", dest="dsn",
                      default="")
opt_parser.add_option("-r", "--retry",
                      help="No-rows-returned retry interval (ISO8601)",
                      action="store", type="string", dest="retry",
                      default="PT15S")
opt_parser.add_option("-v", "--verbose", action="store_true", dest="verbose")
opt_parser.add_option("--debug", action="store_true", dest="debug")


(options, args) = opt_parser.parse_args()

retry = pscheduler.iso8601_as_timedelta(options.retry)
if retry is None:
    opt_parser.error('Invalid retry interval "' + options.retry + '"')
if pscheduler.timedelta_as_seconds(retry) == 0:
    opt_parser.error("Retryinterval must be calculable as seconds.")


log = pscheduler.Log(verbose=options.verbose, debug=options.debug)

dsn = options.dsn

cursor = pscheduler.pg_cursor(dsn)

#
# Main Program
#

try:

    # TODO: This needs a whole lot of bulletproofing.

    cursor.execute("SELECT boot()")

    while True:

        log.debug("Tick")
        cursor.execute("SELECT ticker()")

        if cursor.rowcount == 0:
            # TODO: Log this
            sys.stderr.write("Got no rows back from the database, retrying in"
                             + str(options.retry) + "\n")
            sleep(pscheduler.timedelta_as_seconds(options.retry))
            continue

        sleep_time = cursor.fetchone()[0]
        seconds = pscheduler.timedelta_as_seconds(sleep_time)
        log.debug("Next check in %d seconds", seconds)
        time.sleep(seconds)

    # Not that this will ever be reached...
    pg.close()

except KeyboardInterrupt:
    log.debug("Interrupted")
    sys.stderr.write("Interrupted\n")
    exit(0)
except Exception as ex:
    log.exception()
    raise ex

