#!/usr/bin/env python3
"""Diagnostic program for the limit system

troubleshoot-limits [ OPTIONS ] TASK-FILE

TASK-FILE is the path to a file containing the task you wish to test.
The easy ways to obtain one of these is to use the 'task' command's
--export switch or use cURL to export an existing task from the server
using its URL.

Options:

--config CONFIG-FILE - Location of the limit configuration file.
  Defaults to the limit configuration file on the local system.

--hints HINTS - JSON hints (or @/path to read from a file).  If not
  provided, hints of 127.0.0.1 will be used for the requester and
  server.

--start START-TIME - Proposed start time as an ISO 8601 timestamp.  If
  not provided, time-related limits will be ignored.  If not provided
  but --duration is, the current date and time will be used.

--duration DURATION - How long the proposed task is supposed to take
  on the timeline in ISO8601 format.  If not provided but --start is,
  a default of PT10S will be used.

"""


import argparse
import pscheduler

from pscheduler.limitprocessor.limitprocessor import LimitProcessor

pscheduler.set_graceful_exit()

#
# Gargle the arguments
#


arg_parser = argparse.ArgumentParser(
    usage="%(prog)s [ OPTIONS ] task",
    epilog=
"""
Example:

  limit-diags taskfile
      Test the task described in taskfile against the system's limits.

  limit-diags --start 2017-08-14T12:34:56 --duration PT10S taskfile
      Test the task described in taskfile against the system's limits for
      a specified time and duration.
""",
    formatter_class=argparse.RawTextHelpFormatter
    )


# TODO: This needs to be filled in during build
default_limit_file = "__LIMITSFILE__"

arg_parser.add_argument("--duration",
                      help="Proposed duration (ISO 8601)",
                      default=None,
                      action="store", type=str,
                      dest="duration")

arg_parser.add_argument("--hints",
                      help="Hints as JSON (@/path to read from file;"
                      " defaults 127.0.0.1 for all values)",
                      default=None,
                      action="store", type=str,
                      dest="hints")

arg_parser.add_argument("--config",
                      help="Location of limit configuration file (default %s)" \
                      % (default_limit_file),
                      default=default_limit_file,
                      action="store", type=str,
                      dest="config")

arg_parser.add_argument("--start",
                      help="Proposed start time (ISO 8601)",
                      default=None,
                      action="store", type=str,
                      dest="start")

arg_parser.add_argument("task",
                        help="Read task from this file",
                        nargs="?")



args = arg_parser.parse_args()


#
# Validate everything
#

try:
    if args.start is not None:
        _ = pscheduler.iso8601_as_datetime(args.start)
except ValueError as ex:
    pscheduler.fail("Start time: %s" % (str(ex)))

try:
    if args.duration is not None:
        _ = pscheduler.iso8601_as_timedelta(args.duration)
except ValueError as ex:
    pscheduler.fail("Duration: %s" % (str(ex)))

if args.hints is not None:
    try:
        hints = pscheduler.json_load(
            pscheduler.string_from_file(args.hints))
    except (IOError, ValueError) as ex:
        pscheduler.fail("Hints: %s" % (str(ex)))
else:
    hints = {
        "requester": "127.0.0.1",
        "server": "127.0.0.1"
    }


try:
    processor = LimitProcessor(args.config)
except Exception as ex:
    pscheduler.fail("Unable to read limit configuration: %s" % (str(ex)))




task_file = args.task
try:
    task_text = pscheduler.string_from_file("@%s" % (task_file))
    task = pscheduler.json_load(task_text)
except Exception as ex:
    pscheduler.fail("Unable to read task: %s" % (str(ex)))


if args.start is not None:
    task["run_schedule"] = {
        "start": args.start
    }
    task["run_schedule"]["duration"] = args.duration \
                                   if args.duration is not None else "PT10S"
        
elif args.duration is not None:
    task["run_schedule"] = {
        "duration": args.duration
    }
    task["run_schedule"]["start"] = pscheduler.datetime_as_iso8601(
        pscheduler.time_now())

if "run_schedule" in task:
    print(("For task starting at %s lasting %s:\n" % (
        task["run_schedule"]["start"], task["run_schedule"]["duration"])))

_passed, _limits_passed, diags, new_task, priority \
    = processor.process(task, hints, prioritize=True)

print(diags)
if new_task is not None:
    print()
    print("Rewritten task:")
    print((pscheduler.json_dump(new_task, pretty=True)))

pscheduler.succeed()

exit(99)
