#!/usr/bin/python
#
# Execute runs of tasks and put the results into the database.
#

import errno
import optparse
import pscheduler
import psycopg2
import psycopg2.extensions
import select
import sys
import threading
import time


# Gargle the arguments

opt_parser = optparse.OptionParser()

opt_parser.add_option("-d", "--dsn",
                      help="Database connection string",
                      action="store", type="string", dest="dsn",
                      default="")

# NOTE: Changing the refresh interval will have an effect on how many
# forked processes are running, connected to the database and waiting
# for a run to start.  Increase this value only if you understand the
# consequences.
opt_parser.add_option("-r", "--refresh",
                      help="Forced refresh interval (ISO8601)",
                      action="store", type="string", dest="refresh",
                      default="PT1M")

opt_parser.add_option("--verbose", action="store_true", dest="verbose")
opt_parser.add_option("--debug", action="store_true", dest="debug")

(options, args) = opt_parser.parse_args()

refresh = pscheduler.iso8601_as_timedelta(options.refresh)
if refresh is None:
    opt_parser.error('Invalid refresh interval "' + options.refresh + '"')
if pscheduler.timedelta_as_seconds(refresh) == 0:
    opt_parser.error("Refresh interval must be calculable as seconds.")


log = pscheduler.Log(verbose=options.verbose, debug=options.debug)

dsn = options.dsn



class RunWorker:

    def __init__(self, db, log, id, start_in):

        # Per http://initd.org/psycopg/docs/usage.html#thread-safety,
        # Psycopg is thread-safe when you use multiple cursors against the
        # same connection.
        self.cursor = db.cursor()
        self.log = log
        self.id = id
        self.start_in = start_in
        self.finished = False
        self.output = []

        self.worker = threading.Thread(target=lambda: self.run())
        self.worker.start()


    def __post_new_result(self, json):
        pass  # TODO: Write this.


    def __accumulate_output(self, line):
        if line == '--8<-- pScheduler End Result -->8--':
            __post_new_result("\n".join(self.output))
            self.output = []
        else:
            self.output.append(line)


    def run(self):
        self.log.debug("%d: Thread running", self.id)
        try:
            self.__run()
        except Exception as ex:
            self.log.debug("%d: Exception: %s", self.id, ex)
            log.exception()
        self.log.debug("%d: Thread finished", self.id)


    def __run(self):

        # Don't try to do anyting until the start time.
        sleep_time = pscheduler.timedelta_as_seconds(self.start_in)
        self.log.debug("%d: Sleeping %s until test start", self.id, sleep_time)
        time.sleep(sleep_time)

        self.cursor.execute("""
                       UPDATE run
                           SET state = run_state_running()
                           WHERE id = %s
                       """, [self.id])

        self.cursor.execute("""
                       SELECT
                           tool.name,
                           task.uuid,
                           task.id,
                           task.participant,
                           task.participants,
                           lower(run.times),
                           upper(run.times),
                           task.json #> '{test}',
                           run.uuid,
                           run.part_data_full
                       FROM
                           run
                           JOIN task ON task.id = run.task
                           JOIN tool ON tool.id = task.tool
                       WHERE run.id = %s
                       """, [self.id])

        # TODO: Should get exactly one row back.
        row = self.cursor.fetchone()

        tool, task_uuid, task_id, participant, participants, start, end, \
            test_spec, run_uuid, partdata = row

        #
        # Do the local tool run
        #

        if partdata is None:
            self.log.error("%d: Got NULL part_data_full", self.id)

        tool_input = pscheduler.json_dump({
            'schema': 1,
            'schedule': {
                'start': pscheduler.datetime_as_iso8601(start),
                'duration': pscheduler.timedelta_as_iso8601(end - start)
                },
            'test': test_spec,
            'participant': participant,
            'participant-data': partdata
            })

        self.log.debug("%d: Testing with %s: %s", self.id, tool, tool_input)

        returncode, stdout, stderr = pscheduler.run_program(
            [ "pscheduler", "internal", "invoke", "tool", tool, "run" ],
            stdin = tool_input,
            timeout = pscheduler.timedelta_as_seconds(end - start) + 1,
            line_call = lambda l: self.__accumulate_output(l)
            )

        stdout = "\n".join(self.output)

        if len(stdout) == 0:
            stdout = None

        if len(stderr) == 0:
            stderr = None

        if returncode == 0:
            self.log.debug("%d: Test Succeeded: %s", self.id, stdout)
        else:
            self.log.debug("%d: Test failed %d: %s", self.id, returncode, stderr)

        # TODO: Error check this.
        self.cursor.execute("""
                            UPDATE run
                            SET
                                status = %s,
                                result = %s,
                                errors = %s
                            WHERE id = %s
                            """,
                            [returncode,
                             stdout,
                             stderr,
                             self.id])

        self.log.debug("%d: Stored local result", self.id)

        # The lead participant takes care of gathering and merging the finished results.

        if participant == 0:

            self.log.debug("%d: Doing lead participant duties", self.id)

            # Wait until the scheduled time has passed, which is the
            # only time we can be sure results might be available.

            if len(participants) > 1:
                wait_time = pscheduler.time_until_seconds(end)
                self.log.debug("%d: Waiting for task end time to pass (%s)",
                               self.id, wait_time)
                time.sleep(wait_time)
                self.log.debug("%d: Task end time has passed", self.id)
            else:
                self.log.debug("%d: Only one participant; not waiting.", self.id)

            # Fetch and combine the results.

            runs = [ pscheduler.api_url(host = host,
                                        path = '/tasks/%s/runs/%s'
                                        % (task_uuid, run_uuid) )
                     for host in participants ]

            self.log.debug("%d: Runs are %s", self.id, runs)

            try:
                self.log.debug("%d: Local run returned %d",
                               self.id, returncode)
                if returncode == 0:
                    local_result = pscheduler.json_load(stdout)
                else:
                    local_result = None
                    self.log.debug("%d: Tool returned failure: %s",
                                   self.id, stderr)
            except ValueError as ex:
                self.log.error("%d: Tool %s returned invalid JSON %s",
                               self.id, tool, stdout)
                local_result = None


            full_result = [ local_result ]
            self.log.debug("%d: Accumulated local result", self.id)

            for run in runs[1:]:

                self.log.debug("%d: Fetching run %s", self.id, run)

                status, result = pscheduler.url_get( run,
                                                     params={ 'wait-local': True },
                                                     throw=False )

                if status == 200:
                    self.log.debug("%d: Retrieved %s", self.id, result)
                    full_result.append(result['result'])
                else:
                    self.log.warning("%d: Unable to retrieve run %s", self.id, run)
                    full_result.append(None)

            self.log.debug("%d: Full result: %s",
                           self.id,
                           pscheduler.json_dump(full_result))

            # TODO: If any of the tests resulted in a failure, check
            # if the participants' clocks are off and add that to the
            # diagnostics.

            # Store the full result with each participant.

            full_params = pscheduler.json_dump({ 'result-full' : full_result })

            for run in runs:
                self.log.debug("%d: Storing full result in %s, params=%s",
                               self.id, run, full_params)
                status, returned = pscheduler.url_put(run,
                                                      data=full_params,
                                                      throw=False,
                                                      json=False)
                if status != 200:
                    self.log.warning("%d: Unable to update run %s: %d %s",
                                     self.id, run, status, returned)


        self.cursor.close()
        self.log.debug("%d: Run complete", self.id)
        self.finished = True


#
# Main Program
#


def main_program():

    db = pscheduler.pg_connection(dsn)
    cursor = db.cursor()

    cursor.execute("LISTEN run_new")

    while True:

        # Operate only on runs that are scheduled to start before the next
        # forced refresh.

        cursor.execute("""SELECT
                              run,
                              start_in
                          FROM
                              schedule_upcoming
                          WHERE
                              start_in < %s
                          ORDER BY start_in
                   """, [refresh]);

        wait_time = None

        if cursor.rowcount:

            run_ids = []

            for row in cursor:

                run_id, start_in = row
                run_ids.append(run_id)
                log.debug("Run %s starts in %s" % (run_id, start_in))

                # TODO: Hold this
                worker = RunWorker(db, log, run_id, start_in)

                if wait_time is None:
                    wait_time = start_in


            # Do this here to guarantee that we don't pick up rows for
            # runs we just started in the next iteration of the loop.
            cursor.execute("""
                           UPDATE run
                           SET state = run_state_on_deck()
                           WHERE id in %s""", (tuple(run_ids),))


        else:

            log.debug("Nothing to do.")
            wait_time = refresh


        if not pscheduler.timedelta_is_zero(wait_time):

            # Wait for a notification or the wait time to elapse.  Eat all
            # notifications as a group; we only care that we were notified.

            log.debug("Next run or check in %s", wait_time)

            # TODO: This try needs to be brought to the other programs.
            # Better, make it a function in db.py.

            try:
                if select.select([db],[],[],
                                 pscheduler.timedelta_as_seconds(wait_time)) \
                                 != ([],[],[]):
                    # Notified
                    db.poll()
                    del db.notifies[:]
                    log.debug("Schedule change.")

            except select.error as ex:

                err_no, message = ex
                if err_no != errno.EINTR:
                    log.exception()
                    raise ex

    # Not that this will ever be reached...
    db.close()



pscheduler.safe_run(lambda: main_program())
