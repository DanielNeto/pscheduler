#!/usr/bin/python
#
# Load a group of IPs into the database under an identifier
#
# Usage:  load-ips [ --dsn dsn ] identifier [ file ]
#

import ipaddr
import optparse
import pscheduler
import socket
import sys


#
# Gargle the arguments
#

opt_parser = optparse.OptionParser()
opt_parser.add_option("-d", "--dsn",
                      help="Database connection string, prefix with @ to read from file",
                      action="store", type="string", dest="dsn",
                      default="")
opt_parser.add_option("--verbose", action="store_true", dest="verbose")
opt_parser.add_option("--debug", action="store_true", dest="debug")

(options, args) = opt_parser.parse_args()

try:
    identifier = sys.argv[1]
except IndexError:
    pscheduler.fail("Usage: load-ips [ --dsn dsn ] identifier [ file ]")


try:
    input = open(sys.argv[2])
except IOError as ex:
    pscheduler.fail("Unable to open input: %s" % (str(ex)))
except IndexError:
    input = sys.stdin

blocks = []

for block in input:

    # Strip out comments and ignore empty lines

    try:
        block = block[:block.index('#')]
    except ValueError:
        pass
    block = block.strip()

    if block == '':
        continue

    # See if it looks like a CIDR

    try:
        net = ipaddr.IPNetwork(block)
    except ValueError:
        pscheduler.fail("Invalid IP %s" % (block))

    blocks.append(block)




log = pscheduler.Log(verbose=options.verbose, debug=options.debug)
dsn = options.dsn
cursor = pscheduler.pg_cursor(dsn)

rollback = None


try:
    cursor.execute("SELECT api_auth_ip_post(%s, %s::INET[])",
                   [identifier, blocks])
except Exception as ex:
    log.exception()
    pscheduler.fail("Unable to update database" + str(ex))

pscheduler.succeed()
