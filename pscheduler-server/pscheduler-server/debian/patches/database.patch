--- a/database/run_state.sql
+++ b/database/run_state.sql
@@ -183,7 +183,7 @@
 
 ALTER TABLE run_state DISABLE TRIGGER run_state_alter;
 INSERT INTO run_state (id, display, enum)
-VALUES
+(SELECT * FROM (VALUES
     (run_state_pending(),  'Pending',  'pending'),
     (run_state_on_deck(),  'On Deck',  'on-deck'),
     (run_state_running(),  'Running',  'running'),
@@ -194,10 +194,9 @@
     (run_state_failed(),   'Failed',   'failed'),
     (run_state_trumped(),  'Trumped',  'trumped'),
     (run_state_nonstart(), 'Non-Starter', 'nonstart')
-ON CONFLICT (id) DO UPDATE
-SET
-    display = EXCLUDED.display,
-    enum = EXCLUDED.enum;
+) as tmp (id, display, enum) WHERE NOT EXISTS (
+    SELECT 1 FROM run_state WHERE run_state.id = tmp.id
+));
 ALTER TABLE run_state ENABLE TRIGGER run_state_alter;
 
 
--- a/database/scheduling_class.sql
+++ b/database/scheduling_class.sql
@@ -132,17 +132,13 @@
 
 ALTER TABLE scheduling_class DISABLE TRIGGER scheduling_class_alter;
 INSERT INTO scheduling_class (id, display, enum, anytime, exclusive, multi_result)
-VALUES
+(SELECT * from (VALUES
     (scheduling_class_background(), 'Background', 'background', TRUE,  FALSE, TRUE),
     (scheduling_class_exclusive(),  'Exclusive',  'exclusive',  FALSE, TRUE,  FALSE),
     (scheduling_class_normal(),     'Normal',     'normal',     FALSE, FALSE, FALSE)
-ON CONFLICT (id) DO UPDATE
-SET
-    display = EXCLUDED.display,
-    enum = EXCLUDED.enum,
-    anytime = EXCLUDED.anytime,
-    exclusive = EXCLUDED.exclusive,
-    multi_result = EXCLUDED.multi_result;
+) AS tmp (id, display, enum, anytime, exclusive, multi_result) WHERE NOT EXISTS (
+    SELECT 1 FROM scheduling_class WHERE scheduling_class.id = tmp.id
+));
 ALTER TABLE scheduling_class ENABLE TRIGGER scheduling_class_alter;
 
 
--- a/database/database.sql
+++ b/database/database.sql
@@ -1,40 +1,3 @@
---
--- Database creation
---
-
-CREATE EXTENSION IF NOT EXISTS dblink;
-
-DO $$
-DECLARE
-    db_name TEXT;
-BEGIN
-
-    db_name := 'pscheduler';
-
-    IF NOT EXISTS (SELECT * FROM pg_roles WHERE rolname = db_name)
-    THEN
-        PERFORM dblink_exec('dbname=' || current_database(),
-                            'CREATE ROLE ' || db_name || ' WITH LOGIN');
-        RAISE NOTICE 'Created role %', db_name;
-    END IF;
-
-    IF NOT EXISTS (SELECT * FROM pg_database WHERE datname = db_name)
-    THEN
-        PERFORM dblink_exec('dbname=' || current_database(),
-                            'CREATE DATABASE ' || db_name
-                              || ' WITH OWNER=' || db_name);
-        PERFORM dblink_exec('dbname=' || current_database(),
-                            'GRANT ALL ON DATABASE ' || db_name
-			      || ' TO ' || db_name);
-        RAISE NOTICE 'Created database %', db_name;
-    END IF;
-
-END;
-$$ LANGUAGE plpgsql;
-
-
-\c pscheduler
-
 CREATE OR REPLACE LANGUAGE plpythonu;
 
 -- Needed for generating UUIDs
