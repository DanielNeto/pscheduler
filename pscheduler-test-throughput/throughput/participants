#!/usr/bin/python
#
# Participant list generator for 'throughput' task spec
#
# Input is a test spec, assumed to have been validated by spec-is-valid.
#
# Output is a list of hostnames or IPs that are participating.
#

import pscheduler
import sys

json = pscheduler.json_load(exit_on_error=True)

null_reason = None

#sender first participant, receiver the second
try:
    source = json['source']
except KeyError:
    source = None
    null_reason = "No source specified"

try: 
    destination = json['dest']
except KeyError:
    pscheduler.fail("Missing destination argument in spec")

######################################################################
#Backward Compatibility Code: We can remove this once we drop BWCTL
#
# Check that both sides have pScheduler and do the following:
# * if both have pScheduler, proceed as normal
# * if only one has pscheduler, return just that one
# * if neither side does, fail the test
def has_pscheduler(address):
    #null participant means localhost, which means has psc by definition
    if address is None:
        return True
    
    # Ask the server for something really basic.
    status, raw_spec = pscheduler.url_get(
                                            pscheduler.api_url( host=address,
                                                                path='hostname'),
                                            throw=False
                                        )
    return status == 200

src_has_psc = has_pscheduler(source)
dst_has_psc = has_pscheduler(destination)
if src_has_psc and dst_has_psc:
    participants = [ source, destination ]
elif src_has_psc:
    participants = [ source ]
elif dst_has_psc:
    participants = [ destination ]
else: 
    pscheduler.fail("Neither the source nor destination is running pScheduler.")
######################################################################


result = { "participants": participants }
if null_reason is not None:
    result["null-reason"] = null_reason

pscheduler.succeed_json(result)


