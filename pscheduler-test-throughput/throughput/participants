#!/usr/bin/python
#
# Participant list generator for 'throughput' task spec
#
# Input is a test spec, assumed to have been validated by spec-is-valid.
#
# Output is a list of hostnames or IPs that are participating.
#

import pscheduler
import sys


logger = pscheduler.Log(prefix='test-throughput', quiet=True)

json = pscheduler.json_load(exit_on_error=True)

null_reason = None

#sender first participant, receiver the second
try:
    source = json['source']
except KeyError:
    source = None
    null_reason = "No source specified"

try: 
    destination = json['dest']
except KeyError:
    pscheduler.fail("Missing destination argument in spec")


######################################################################
#Backward Compatibility Code: We can remove this once we drop BWCTL
#
# Check that both sides have pScheduler and do the following:
# * if both have pScheduler, proceed as normal
# * if only one has pscheduler, return just that one
# * if neither side does, fail the test

src_has_psc = pscheduler.api_has_pscheduler(source)
dst_has_psc = pscheduler.api_has_pscheduler(destination)

logger.debug("src_has_psc = %s, dst_has_psc = %s" % (src_has_psc, dst_has_psc))

if src_has_psc and dst_has_psc:
    participants = [ source, destination ]
elif src_has_psc:
    if not pscheduler.api_has_bwctl(destination):
        pscheduler.fail("Can't find pScheduler or BWCTL on %s" % destination)
    participants = [ source ]
elif dst_has_psc:
    if not pscheduler.api_has_bwctl(source):
        pscheduler.fail("Can't find pScheduler or BWCTL on %s " % source)
    participants = [ destination ]
else: 
    pscheduler.fail("Neither the source nor destination is running pScheduler.")


######################################################################


result = { "participants": participants }
if null_reason is not None:
    result["null-reason"] = null_reason

pscheduler.succeed_json(result)


