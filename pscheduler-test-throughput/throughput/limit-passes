#!/usr/bin/python
#
# Checker for 'thrughput' task limits
#

import pscheduler
import validate

logger = pscheduler.Log()

#
# Load and validate everything
#

def check_limit(input_json):

    errors = []

    spec = input_json["spec"]
    valid, message = validate.spec_is_valid(spec)
    if not valid:
        raise ValueError("Invalid test spec: %s" % message)

    limit = input_json["limit"]
    valid, message = validate.limit_is_valid(limit)
    if not valid:
        raise ValueError("Invalid limit: %s" % message)


    #
    # Evaluate everything
    #



    logger.debug("limit = %s" % limit)

    
    #
    # Bandwidth
    #
    
    
    try:
        nrange = pscheduler.NumericRange(limit["bandwidth"]["range"])
        
        # doesn't really make sense to invert bandwidth I think?
        contains, message = nrange.contains(spec["bandwidth"])
        if not contains:
            errors.append("Bandwidth %s" % message)

    except KeyError:
        pass  # Don't care if not there.


    #
    # Duration
    #
    
    try:
        nrange = pscheduler.DurationRange(limit["duration"]["range"])
        
    # doesn't really make sense to invert duration I think?
        contains, message = nrange.contains(spec["duration"])
        if not contains:
            errors.append("Duration %s" % message)

    except KeyError:
        pass  # Don't care if not there.


    #
    # Allow UDP or not
    #
   
    try:
        limit_udp = limit['udp']['match']

        spec_udp = spec.get('udp', False)

        if spec_udp != limit_udp:
            errors.append("%s testing not allowed"
                          % ("UDP" if spec_udp else "TCP"))
    except KeyError:
        pass  # Not there?  Don't care.
        


    #
    # Restrict ip-version
    #
    
    try:
        enum = {
            "enumeration": limit["ip-version"]["enumeration"],
            "invert": limit["ip-version"].get("invert", False),
        }
        match = pscheduler.EnumMatcher(enum)
        fail_msg = limit["ip-version"].get("fail-message","IPv{0} is not allowed".format(spec["ip-version"]))
        contains = match.contains(spec["ip-version"])
        if not contains:
            errors.append("IP Version {0}".format(fail_msg))
    except KeyError:
        pass  # Not there?  Don't care.


    #
    # Restrict number of parallel streams
    #

    try:
        match = pscheduler.NumericRange(limit["parallel"]['range'])

        # no sense to invert this
        contains, message = match.contains(spec["parallel"])

        if not contains:
            try:
                errors.append(limit["parallel"]["fail-message"])
            except KeyError:
                errors.append("Parallel setting of %s is not allowed" % spec["parallel"])

    except KeyError:
        pass  # Not there?  Don't care.



    #
    # Source / Dest limits
    #

    # figure out what ip_version this test
    # is going to be, if hard coded great
    ip_version = spec.get('ip-version', None)

    source  = spec.get('source', None)
    dest    = spec['dest']

    # dest only needs to care about its interface to limit on
    is_dest = pscheduler.address_interface(dest)

    if is_dest:
        if limit.has_key('dest'):
            dest_limit = limit['dest']

            if not source and not ip_version:

                # See if we've been specified in IP notation, can infer from that
                dest_version = pscheduler.ip_addr_version(dest, resolve = False)[0]

                # If we're a hostname and no ipversion was given and no source was given
                # we abort
                # TODO - should this try to lookup AAAA and A and if only one exists just assume that?
                if not dest_version:
                    pscheduler.fail("Attempt to limit 'dest' but no ip-version given and no explicit source given, unable to determine what address will be used")
                else:
                    ip_version = dest_version
                
            if source and not ip_version:
                source, dest = pscheduler.ip_normalize_version(source, dest)

                if not source or not dest:
                    pscheduler.fail("Unable ot normalize %s and %s to the same IP version" % (source, dest))
                ip_version = pscheduler.ip_addr_version(source)[0]

            
            final_dest_resolved = pscheduler.dns_resolve(dest, ip_version=ip_version)

            if not final_dest_resolved:
                pscheduler.fail("Unable to resolve %s to ip version %s" % (dest, ip_version))
            
            matcher = pscheduler.IPCIDRMatcher(dest_limit)
            if not matcher.contains(final_dest_resolved):
                errors.append("address %s not allowed in dest limit" % (final_dest_resolved))

    # we're not the dest, we're the source
    else:
        if limit.has_key("source"):
            source_limit = limit['source']

            # if we don't have an explicit ip_version, figure it out from the dest if we can
            if not ip_version:
                ip_version = pscheduler.ip_addr_version(dest)[0]
                
                # TODO: same as above with single AAAA / A? 
                if not ip_version:
                    pscheduler.fail("Attempt to limit 'source' but no ip-version given and dest is not given as v4 or v6 address, unable to determine what address will be used")

            # if we haven't specified a source and are doing it implicitly, look it up here
            # we know ip_version at this point
            if not source:
                (source_addr, source_if) = pscheduler.source_interface(dest, ip_version=ip_version)
                if not source_addr:
                    pscheduler.fail("Unable to determine source interface to get to %s ip version=%s" % (dest, ip_version))
                source = source_addr

            matcher = pscheduler.IPCIDRMatcher(source_limit)
            if not matcher.contains(source):
                errors.append("address %s not allowed in source limit" % (source))
        

    return errors

try:
    json = pscheduler.json_load(max_schema=1)
except ValueError as ex:
    pscheduler.fail("Invalid JSON: %s" % str(ex))

errors = check_limit(json)

result = { "passes": not errors }

if errors:
    result["errors"] = errors

pscheduler.succeed_json(result)


