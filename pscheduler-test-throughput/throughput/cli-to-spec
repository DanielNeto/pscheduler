#!/usr/bin/python
#
# Convert comamnd-line options to a test specification

import optparse
import pscheduler
import sys
import socket

logger = pscheduler.Log(prefix='test-throughput')

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if type(json_args) != list:
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if type(arg) not in (unicode, str, int, float):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

opt_parser = optparse.OptionParser()

opt_parser.add_option("-s", "--source",
                      help="Sending host",
                      action="store", type="string",
                      dest="source")


opt_parser.add_option("-d", "--destination",
                      help="Receiving host",
                      action="store", type="string",
                      dest="destination")

opt_parser.add_option("-t", "--duration",
                      help="Total runtime of test",
                      action="store", type="string",
                      dest="duration")

opt_parser.add_option("-i", "--interval",
                      help="How often to report results (internally, results still reported in aggregate at end)",
                      action="store", type="string",
                      dest="interval")

opt_parser.add_option("-P", "--parallel",
                      help="How many parallel streams to run during the test",
                      action="store", type="string",
                      dest="parallel")

opt_parser.add_option("-u", "--udp",
                      help="Use UDP instead of TCP testing",
                      action="store_true", 
                      dest="udp")

opt_parser.add_option("-b", "--bandwidth",
                      help="Bandwidth to rate limit the test to",
                      action="store", type="string",
                      dest="bandwidth")

opt_parser.add_option("-w", "--window-size",
                      help="TCP window size to use for the test",
                      action="store", type="string",
                      dest="window_size")

opt_parser.add_option("-m", "--mss",
                      help="TCP maximum segment size",
                      action="store", type="string",
                      dest="mss")


(options, remaining_args) = opt_parser.parse_args(args)
if len(remaining_args) != 0:
   pscheduler.fail("Found superfluous arguments on command line.")


result = { 'schema': 1 }

if options.source is not None:
   result['source'] = options.source
   
if options.destination is not None:
   result['destination'] = options.destination

if options.duration is not None:
   result['duration'] = options.duration

if options.interval is not None:
   result['interval'] = options.interval

if options.parallel is not None:
   result['parallel'] = options.parallel

if options.udp:
   result['udp'] = True

if options.bandwidth is not None:
   result['bandwidth'] = options.bandwidth

if options.window_size is not None:
   result["window-size"] = options.window_size

if options.mss is not None:
   result["mss"] = options.mss


# Set default of either source or destination to "me" if not
# provided
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(('8.8.8.8', 0))  # connecting to a UDP address doesn't send packets
me = s.getsockname()[0]

logger.debug("Me = %s" % me)

if not result.has_key("source") and result.has_key("destination"):
   result["source"] = me
elif not result.has_key("destination") and result.has_key("source"):
   result["destination"] = me

pscheduler.succeed_json(result)
