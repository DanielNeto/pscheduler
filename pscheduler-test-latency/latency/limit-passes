#!/usr/bin/python
#
# Checker for 'latency' task limits
#

import pscheduler

logger = pscheduler.Log(quiet=True)


#
# Check if an an individual ip param matches limit
#
def check_ip_limit(addr, ip, possible_ip_versions, limit):
    errors = []
    if addr is None:
        #if no addr given then quietly exit
        return errors
        
    # resolve to IP
    all_ips = []
    if ip is None:
        #still need to resolve, because source was not specified
        for possible_ip_version in possible_ip_versions:
            resolved = pscheduler.dns_resolve(addr, ip_version=possible_ip_version)
            if resolved:
                all_ips.append(resolved)
        if len(all_ips) == 0:
            errors.append("{1} cannot be resolved to IP address".format(addr))
            return errors
    else:
        #already resolved, so just look at that
        all_ips = [ ip ]
    
    #do match
    matcher = pscheduler.IPCIDRMatcher(limit)
    for candidate_ip in all_ips:
        if not matcher.contains(candidate_ip):
            errors.append("{0} is not in the allowed address range".format(candidate_ip))
    
    return errors

#
# Check source, dest, endpoint limits
#

def check_ip_limits(spec, limit):
    errors = []
    
    #if no source, dest or endpoint limit then exit immediately
    has_endpoint_limit = False
    for ep_limit in ["source", "dest", "endpoint"]:
        if limit.has_key(ep_limit): 
            has_endpoint_limit = True
            break
    if not has_endpoint_limit:
        return errors
        
    #init source, dest and ip version
    ip_version = spec.get('ip-version', None)
    possible_ip_versions = [4, 6]
    source  = spec.get('source', None)
    dest    = spec['dest'] #required
    source_ip = None
    dest_ip = None
    if source is not None:
        source_ip, dest_ip = pscheduler.ip_normalize_version(source, dest, ip_version=ip_version)
        if source_ip is None or dest_ip is None:
            #no use in proceeding if can't be resolved
            errors.append("source {0} and dest {1} cannot be resolved to IP addresses of the same type".format(source, dest))
            return errors
        if ip_version is None:
            ip_version = pscheduler.ip_addr_version(dest_ip)[0]
    if ip_version is not None:
        possible_ip_versions = [ip_version]
        
    #check source limit if any
    if limit.has_key("source"):
        if source_ip is None:
            errors.append("This test has a limit on the source field but the source " +
                            "was not specifed. You must specify a source to run this test")
        else:
            errors += check_ip_limit(source, source_ip, possible_ip_versions, limit['source'])
    
    #check dest limit if any
    if limit.has_key("dest"):
        errors += check_ip_limit(dest, dest_ip, possible_ip_versions, limit['dest'])
                
    #check endpoint limit if any
    if limit.has_key("endpoint"):
        if source is None or check_ip_limit(source, source_ip, possible_ip_versions, limit['endpoint']):
            #source does not match
            if check_ip_limit(dest, dest_ip, possible_ip_versions, limit['endpoint']):
                #dest does not match
                    errors.append("source nor dest matches the IP range set by endpoint limit")
    
    return errors


#
# Load and validate everything
#

def check_limit(input_json):

    spec = input_json["spec"]
    limit = input_json["limit"]
    logger.debug("limit = {0}".format(limit))
    
    #
    # Handle source, dest and endpoint limits
    #
    errors = check_ip_limits(spec, limit)
              
    #
    # Handle numeric ranges
    #
    numeric_ranges = [
        ("packet-count", "Packet Count"),
        ("packet-interval", "Packet Interval"),
        ("packet-timeout", "Packet Timeout"),
        ("packet-padding", "Packet Padding"),
        ("ctrl-port", "Control Ports"),
        ("ip-tos", "IP TOS"),
        ("bucket-width", "Bucket Width"),
    ]
    for nr in numeric_ranges:
        try:
            nrange = pscheduler.NumericRange(limit[nr[0]]["range"])
            invert = limit[nr[0]].get("invert", False)
            contains, message = nrange.contains(spec[nr[0]])
            if invert:
                if contains:
                    errors.append("{0} {1}".format(nr[1], message))
            else:
                if not contains:
                    errors.append("{0} {1}".format(nr[1], message))
        except KeyError:
            pass  # Don't care if not there.
    #
    # Handle data ports since both limit and spec value are ranges
    #
    try:
        nrange = pscheduler.NumericRange(limit['data-ports']["range"])
        invert = limit['data-ports'].get("invert", False)
        for bound in ['lower', 'upper']:
            contains, message = nrange.contains(spec['data-ports'][bound])
            if invert:
                if contains:
                    errors.append("Data port ({0} bound) {1}".format(bound, message))
            else:
                if not contains:
                    errors.append("Data port ({0} bound) {1}".format(bound, message))
    except KeyError:
        pass  # Don't care if not there.

    #
    # Handle duration
    #
    #special conditions if present, so have to check if its there
    if "duration" in limit:
        #We can't trust tools to have same defaults, which means no way we can guarantee
        #duration is not exceeded unless both parameters are specified.
        if ("packet-interval" not in spec) or ("packet-count" not in spec):
            errors.append("There is a duration limit on this test which requires you to explicitly set the packet-interval and packet-count options in the test specification. Please set both these options and resubmit.")
        elif "range" in limit["duration"]:
            nrange = pscheduler.DurationRange(limit["duration"]["range"])
            invert = limit["duration"].get("invert", False)
            contains, message = nrange.contains("PT{0}S".format(spec["packet-interval"] * spec["packet-count"]))
            if invert:
                if contains:
                    errors.append("Duration {1}".format(nr[1], message))
            else:
                if not contains:
                    errors.append("Duration {1}".format(nr[1], message))


    #
    # Handle boolean fields
    booleans = [
        ("output-raw", "Output Raw"),
        ("flip", "Flip")
    ]
    for b in booleans:
        try:
            limit_bool = limit[b[0]]['match']
            spec_bool = spec.get(b[0], False)
            fail_msg = limit[b[0]].get("fail-message", "{0} testing not allowed".format(b[1]))
            if spec_bool != limit_bool:
                errors.append(fail_msg)
        except KeyError:
            pass  # Not there?  Don't care.
        

    #
    # Restrict ip-version
    #
    try:
        enum = {
            "enumeration": limit["ip-version"]["enumeration"],
            "invert": limit["ip-version"].get("invert", False),
        }
        match = pscheduler.EnumMatcher(enum)
        fail_msg = limit["ip-version"].get("fail-message","IPv{0} is not allowed".format(spec["ip-version"]))
        contains = match.contains(spec["ip-version"])
        if not contains:
            errors.append("IP Version {0}".format(fail_msg))
    except KeyError:
        pass  # Not there?  Don't care.


    #return errors
    return errors


try:
    json = pscheduler.json_load(max_schema=1)
    logger.info(json)
except ValueError as ex:
    pscheduler.fail("Invalid JSON: %s" % str(ex))

errors = check_limit(json)

result = { "passes": not errors }

if errors:
    result["errors"] = errors

pscheduler.succeed_json(result)
