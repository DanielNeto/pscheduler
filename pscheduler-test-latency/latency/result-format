#!/usr/bin/python
#
# Format a result
#

import pscheduler
import sys
import math
import jsonschema
from latency_utils import Histogram, load_schema

#constants
SCHEMA_FILE = "pscheduler-schema-latency-response.json"

#Get format. Currently only support text/plain
try:
   format = sys.argv[1]
except IndexError:
   format = 'text/plain'

if format != 'text/plain':
    pscheduler.fail("Unsupported format '%s'" % format)

#parse JSON input
json = pscheduler.json_load(exit_on_error=True)

#validate against JSON schema file
schema = load_schema(SCHEMA_FILE)
try:
    jsonschema.validate(json, schema, format_checker=jsonschema.FormatChecker())
except Exception, e:
    # may want to just print warning in future so can get partial results
    pscheduler.fail("Invalid response from server: %s" % e.message)

#Output basic stats
output = "\nPacket Statistics\n"
output += "-----------------\n"
output += "Packets Sent ......... %s packets\n" % json.get('packets-sent', 'Not Reported')
output += "Packets Received ..... %s packets\n" % json.get('packets-received', 'Not Reported')
output += "Packets Lost ......... %s packets\n" % json.get('packets-lost', 'Not Reported')
output += "Packets Duplicated ... %s packets\n" % json.get('packets-duplicated', 'Not Reported')
output += "Packets Reordered .... %s packets\n" % json.get('packets-reordered', 'Not Reported')

#Output one-way delay histogram
output += "\nOne-way Latency Statistics\n"
output += "--------------------------\n"
owd_hist = Histogram(json.get('histogram-latency', {}))
stats = owd_hist.get_stats()
output += "Delay Median ......... %.2f ms\n" % stats.get('median', 'Not Reported')
output += "Delay Minimum ........ %.2f ms\n" % stats.get('minimum', 'Not Reported')
output += "Delay Maximum ........ %.2f ms\n" % stats.get('maximum', 'Not Reported')
output += "Delay Mean ........... %.2f ms\n" % stats.get('mean', 'Not Reported')
output += "Delay Mode ........... " 
for mode in stats.get('mode', []):
    output += "%.2f ms " % mode 
output +=  "\n"
output += "Delay 25th Percentile  %.2f ms\n" % stats.get('percentile-25', 'Not Reported')
output += "Delay 75th Percentile  %.2f ms\n" % stats.get('percentile-75', 'Not Reported')
output += "Delay 95th Percentile  %.2f ms\n" % stats.get('percentile-95', 'Not Reported')
output += "Max Clock Error ...... %s ms\n" % json.get('max-clock-error', 'Not Reported')
output += "Common Jitter Measurements:\n"

if stats.get('percentile-95', None) and stats.get('median', None):
    output += "    P95 - P50 ........ %.2f ms\n" % (stats['percentile-95'] - stats['median'])
if stats.get('percentile-75', None) and stats.get('percentile-25', None):
    output += "    P75 - P25 ........ %.2f ms\n" % (stats['percentile-75'] - stats['percentile-25'])
output += "    Variance ......... %.2f ms\n" % stats.get('variance', 'Not Reported')
output += "    Std Deviation .... %.2f ms\n" % stats.get('standard-deviation', 'Not Reported')
output += "Histogram:\n"
for owd_bucket in sorted(json.get('histogram-latency', {}).items()):
    output += "    %s ms: %d packets\n" % (owd_bucket[0], owd_bucket[1])
    
#Output TTL histogram
output += "\nTTL Statistics\n"
output += "--------------\n"
ttl_hist = Histogram(json.get('histogram-ttl', {}))
ttl_stats = ttl_hist.get_stats()
output += "TTL Median ........... %.2f\n" % ttl_stats.get('median', 'Not Reported')
output += "TTL Minimum .......... %.2f\n" % ttl_stats.get('minimum', 'Not Reported')
output += "TTL Maximum .......... %.2f\n" % ttl_stats.get('maximum', 'Not Reported')
output += "TTL Mean ............. %.2f\n" % ttl_stats.get('mean', 'Not Reported')
output += "TTL Mode ............. " 
for mode in ttl_stats.get('mode', []):
    output += "%.2f " % mode 
output +=  "\n"
output += "TTL 25th Percentile .. %.2f\n" % ttl_stats.get('percentile-25', 'Not Reported')
output += "TTL 75th Percentile .. %.2f\n" % ttl_stats.get('percentile-75', 'Not Reported')
output += "TTL 95th Percentile .. %.2f\n" % ttl_stats.get('percentile-95', 'Not Reported')
output += "Histogram:\n"
for ttl_bucket in sorted(json.get('histogram-ttl', {}).items()):
    output += "    %s: %d packets\n" % (ttl_bucket[0], ttl_bucket[1])

#output raw packets if we have them
if 'raw-packets' in json:
    output += "\nRaw packets\n"
    output += "----------\n"
    output +=  "SEQ SRC-TS SRC-CLOCK-SYNC SRC-CLOCK-ERR DST-TS DST-CLOCK-SYNC DST-CLOCK-ERR TTL\n"
    for p in json['raw-packets']:
        output += "%d %d %s %s %d %s %s %d\n" % (p['seq-num'], p['src-ts'], p['src-clock-sync'], p.get('src-clock-err', 'n/a'),  p['dst-ts'], p['dst-clock-sync'], p.get('dst-clock-err', 'n/a'), p['ip-ttl'])

#Print to stdout
print output