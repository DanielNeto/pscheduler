#!/usr/bin/python
#
# Format a result
#

import jsontemplate
import pscheduler
import sys

from validate import result_is_valid


try:
   format = sys.argv[1]
except IndexError:
   format = 'text/plain'

json = pscheduler.json_load(exit_on_error=True)

valid, message = result_is_valid(json)

if not valid:
    pscheduler.fail(message)


# TODO: These should do something reasonable if there are no hops in
# the result.

if format == 'text/plain':
   template = None

   hop_template = """{number}:  \
{.section hostname}{hostname} ({.end}\
{.section ip}{ip}{.or}{.section hostname}NONE{.or}No Response{.end}{.end}\
{.section hostname}){.end}\
{.section as} AS{as}{.end}\
{.section rtt} {rtt} ms{.end}\
{.section error} {error}{.end}
"""

   end_template = None

elif format == 'text/html':

   template = """
<table>
<tr>
  <th>TTL</th>
  <th>Address</th>
  <th>Host</th>
  <th>AS</th>
  <th>RTT (ms)</th>
  <th>Error</th>
</tr>
   """

   hop_template = """
<tr>
  <th>{number}</th>
  <td>{.section ip}{ip}{.end}</td>
  <td>{.section hostname}{hostname}{.end}</td>
  <td>{.section as}{as}{.end}</td>
  <td>{.section rtt}{rtt}{.end}</td>
  <td>{.section error}{error}{.end}</td>
</tr>

"""

   end_template = """
</table>
"""


else:

   pscheduler.fail("Unsupported format '%s'" % format)


# TODO: Should probably handle exceptions in a nicer way.

if template is not None:
   print jsontemplate.expand(template, json).strip()

hopno = 1
for hop in json['hops']:
   hop['number'] = hopno
   try:
      ms = pscheduler.timedelta_as_seconds(pscheduler.iso8601_as_timedelta(hop['rtt'])) * 1000
      hop['rtt'] = ('%f' % ms).rstrip('0')
   except KeyError:
      pass

   print '  ', jsontemplate.expand(hop_template, hop).strip()
   hopno += 1

if end_template is not None:
   print jsontemplate.expand(end_template, json).strip()
