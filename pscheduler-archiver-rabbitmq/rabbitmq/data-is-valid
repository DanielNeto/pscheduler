#!/usr/bin/python
#
# Validate data for the syslogarchiver
#

import pscheduler

try:
    json = pscheduler.json_load(max_schema=2)
except ValueError as ex:
    pscheduler.succeed_json({
        "valid": False,
        "error": str(ex)
        })

data_validator = {

    "local": {

        "RabbitMQArchiveSpecification_V1": {
            "type": "object",
            "properties": {
                "schema":       {" type": "integer", "enum": [ 1 ] },
                "_url":         { "$ref": "#/pScheduler/String" },
                "exchange":     { "$ref": "#/pScheduler/String" },
                "routing-key":  { "$ref": "#/pScheduler/String" },
                "retry-policy": { "$ref": "#/pScheduler/RetryPolicy" }
            },
            "required": [
                "_url"
            ],
            "additionalProperties": False
        },

        "RabbitMQArchiveSpecification_V2": {
            "type": "object",
            "properties": {
                "schema":              {" type": "integer", "enum": [ 2 ] },
                "_url":                { "$ref": "#/pScheduler/String" },
                "exchange":            { "$ref": "#/pScheduler/String" },
                "routing-key":         { "$ref": "#/pScheduler/String" },
                "connection-expires":  { "$ref": "#/pScheduler/Duration" },
                "retry-policy":        { "$ref": "#/pScheduler/RetryPolicy" }
            },
            "required": [
                "schema",
                "_url"
            ],
            "additionalProperties": False
        },

        "RabbitMQArchiveSpecification": {
            "anyOf": [
                { "$ref": "#/local/RabbitMQArchiveSpecification_V1" },
                { "$ref": "#/local/RabbitMQArchiveSpecification_V2" }
            ]
        }
    },

    "$ref": "#/local/RabbitMQArchiveSpecification"
}



valid, error = pscheduler.json_validate(json, data_validator)

if not valid:
    pscheduler.succeed_json({
        "valid": False,
        "error": error
        })
    
pscheduler.succeed_json({ "valid": True })
