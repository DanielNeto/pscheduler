#!/usr/bin/env python3
#
# Dump a list of plugins
#

import argparse
import pscheduler

pscheduler.set_graceful_exit()

#
# Gargle the arguments
#

arg_parser = argparse.ArgumentParser(
    usage="%(prog)s [options] type",
    epilog="""
Example:

  plugins tools
      List the tool plugins on the local system

  plugins --host ps.example.org tests
      List the test plugins on ps.example.org
""",
    formatter_class=argparse.RawTextHelpFormatter
    )


arg_parser.add_argument("--bind",
                      help="Make the request from the provided address",
                      default=None,
                      action="store", type=str,
                      dest="bind")
arg_parser.add_argument("--host",
                      help="Query the specified host",
                      default=None,
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("type",
                        help="Type of plugin (tests, tools, archivers or contexts)",
                        nargs="?")

args = arg_parser.parse_args()

plugin = args.type

if plugin not in ["tests", "tools", "archivers", "contexts"]:
    arg_parser.print_usage()
    pscheduler.fail()


#
# Fetch the list
#

url = pscheduler.api_url(args.host, path=plugin)

status, result = pscheduler.url_get(url,
                                    params={"expanded": True},
                                    bind=args.bind,
                                    throw=False)

if status == 400:
    pscheduler.fail("%s: %s" % (args.host, result))
elif status in [202, 204, 205, 206, 207, 208, 226,
                300, 301, 302, 303, 304, 205, 306, 307, 308] \
    or ((status >= 400) and (status <= 499)):
    pscheduler.fail("%s is not running pScheduler" % (args.host))
elif status != 200:
    pscheduler.fail("%s returned status %d: %s" % (args.host, status, result))


#
# Dump the results
#

print("Installed %s on %s:" % (
    plugin,
    args.host if args.host is not None else "this system"
    ))


for item in result:
    print("\n\n%s Version %s" % (
        item["name"],
        item["version"]
    ))
    print(pscheduler.prefixed_wrap("  ", item["description"], indent=2))

    # Handle type-specific attributes

    if plugin == "tests":
        print()
        print("  Scheduling: %s" % (item["scheduling-class"].title()))
    if plugin == "tools":
        print()
        runs = sorted(item["tests"])
        print("  Runs tests: %s" % ( (", ".join(runs)) if runs else "None" ))
        print("  Preference: %d" % item["preference"])

    print()
    print("  Maintainer: %s" % item["maintainer"]["name"])
    print("  Email:      %s" % item["maintainer"]["email"])
    print("  Website:    %s" % item["maintainer"]["href"])

pscheduler.succeed()
