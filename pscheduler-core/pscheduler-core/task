#!/usr/bin/python
#
# Command-Line Interface for running tasks
#

# General syntax:
#     pscheduler task [options] [schedule-opts] test-type [test-opts]

# TODO: Get rid of the print statements in favor of some narrator
# class we can shut off if the options call for quiet.


import optparse
import os
import pscheduler
import subprocess
import sys
import time

#
# Gargle the arguments
#

usage = "Usage: %prog [options] test-type [test-options]"
opt_parser = optparse.OptionParser(usage = usage)
opt_parser.disable_interspersed_args()

# GENERAL OPTIONS

opt_parser.add_option("--assist", "-a",
                      help="Use the named host for assistance (default localhost or $PSCHEDULER_ASSIST)",
                      action="store", type="string",
                      dest="assist")  # Conflict with reserved word

opt_parser.add_option("--export", '-e',
                      help="Export task JSON to stdout and exit",
                      action="store_true", default=False,
                      dest="export")

opt_parser.add_option("--import", "-i",
                      help="Read JSON task template from a file, - for stdin",
                      action="store", type="string",
                      dest="importt")  # Conflict with reserved word

opt_parser.add_option("--url",
                      help="Dump a URL that points to the task after posting and exit",
                      action="store_true", default=False,
                      dest="url")

opt_parser.add_option("--wait",
                      help="Wait for n runs of test",
                      action="store", type="int", default=1,
                      dest="wait")

# SCHEDULING OPTIONS

opt_parser.add_option("--max-runs",
                      help="Maximum number of repeats",
                      action="store", type="int", default=1,
                      dest="max_runs")

# TODO: Need a --randslip (float) switch.

opt_parser.add_option("--repeat",
                      help="Repeat interval (ISO 8601 Duration)",
                      action="store", type="string",
                      dest="repeat")

opt_parser.add_option("--slip",
                      help="Allowed start slip (ISO8601 Duration)",
                      action="store", type="string",
                      dest="slip")

# TODO: Is this a reasonable default, or should we let punt and let
# the database decide?
opt_parser.add_option("--start",
                      help="Start time",
                      action="store", type="string",
                      dest="start")

opt_parser.add_option("--until",
                      help="Time after which scheduling should stop",
                      action="store", type="string",
                      dest="until")


# TODO:  Need a --tool option to force a list of preferred tools.

(options, remaining_args) = opt_parser.parse_args()

if len(remaining_args) < 1:
    opt_parser.print_usage()
    pscheduler.fail()

#
# Validate the command line
#

if options.max_runs < 1:
    pscheduler.fail("Invalid --max-runs; must be 1 or more")

if options.repeat is not None:
    repeat = pscheduler.iso8601_as_timedelta(options.repeat)
    if repeat is None:
        pscheduler.fail("Invalid --repeat; must be ISO 8601 duration")

if options.slip is not None:
    slip = pscheduler.iso8601_as_timedelta(options.slip)
    if slip is None:
        pscheduler.fail("Invalid --slip; must be ISO 8601 duration")

if options.start is not None:
    # TODO: Validate start.  See database source for valid values.
    # Should have a module function that does this.
    pass

if options.until is not None:
    until = pscheduler.iso8601_as_datetime(options.until)
    # TODO: Make sure this value isn't in the past.

if options.wait < 0:
    pscheduler.fail("Invalid --wait; must be 0 or more")

if ( options.repeat is None
     and (
        (options.max_runs is not None and options.max_runs > 1)
        or options.until is not None
        )
     ):
         pscheduler.fail("Using --repeat is required with other"
                         " repetition-related options.")


# Decide who assists us.

assist = options.assist
if assist is None:
    assist = os.getenv('PSCHEDULER_ASSIST')

if assist is not None:
    print "Assistance will be from", assist


#
# If we were asked to read in some JSON, do that.  Anything the
# options add will override it.
#

if options.importt is None:
    task = {
        'schema': 1,
        'schedule': {},
        'test': {
            'spec': {}
            }
        }
    task_read = False
else:
    if options.importt == '-':
        file = sys.stdin
    else:
        try:
            file = open(options.importt)
        except IOError as ex:
            pscheduler.fail("Unable to open task %s" % (str(ex)))
    task = pscheduler.json_load(file, exit_on_error=True)
    # TODO: Validate what we read as a task.
    task_read = True

#
# Overlay schedule options
#

# TODO: Remove after validation
assert 'schedule' in task

if options.max_runs > 1:
    task['schedule']['max-runs'] = options.max_runs

if options.repeat is not None:
    task['schedule']['repeat'] = options.repeat

if options.slip is not None:
    task['schedule']['slip'] = options.slip

if options.start is not None:
    task['schedule']['start'] = options.start

if options.until is not None:
    task['schedule']['until'] = options.until


#
# Figure out what kind of test this is.  Don't worry about it being
# valid, that will be checked later.
#

if task_read:
    try:
        test_type = task['test']['type']
        remaining_args.pop(0)
    except KeyError:
        pscheduler.fail("Template has no type defined.")
    except IndexError:
        pscheduler.fail("No placeholder task type specified.",
                        "  (Should be '-'.)")
else:
    try:
        test_type = remaining_args.pop(0)
    except IndexError:
        pscheduler.fail("No test type specified.")

assert test_type is not None

task['test']['type'] = test_type

#
# Convert the remaining arguments to a test spec.
#

# TODO:  Use the assisting server to do this.
status, stdout, stderr = pscheduler.run_program(
    [ 'pscheduler', 'internal', 'invoke', 'test', test_type, 'cli-to-spec' ],
    stdin = pscheduler.json_dump(remaining_args),
    short = True,
    fail_message="Unable to parse test arguments"
)
assert status == 0

json_to_merge = pscheduler.json_load(stdout)
assert 'spec' in task['test']
task['test']['spec'].update(json_to_merge)

task_json_text = pscheduler.json_dump(task)


if options.export:
    pscheduler.json_dump(obj=task, dest=sys.stdout, pretty=True)
    print
    pscheduler.succeed()


print
print "WARNING:  This program is still experimental.  Expect it not to work."
print

#
# Contact the assist server
#

status, text =  pscheduler.url_get( pscheduler.api_url(assist, '/hostname'),
                                    throw=False )
if status != 200:
    pscheduler.fail("Can't talk to the pScheduler server at %s: %s"
                    % (assist, text))


#
# Determine the lead participant
#

url = pscheduler.api_url(assist, '/tests/%s/lead' % task['test']['type'])

try:
    status, lead = pscheduler.url_get( url, params={
            'spec': pscheduler.json_dump(task['test']['spec'])
            } )
except Exception as ex:
    pscheduler.fail("Unable to determine the lead participant: " + str(ex))

print "This task will be lead by", lead


#
# Give the task to the lead for scheduling.
#

try:
    status, task_url = pscheduler.url_post( pscheduler.api_url(lead, '/tasks'),
                                            data=task_json_text,
                                            throw=False)
except Exception as ex:
    pscheduler.fail("Unable to post task: " + str(ex))

if status != 200:
    pscheduler.fail("Unable to post task: " + task_url)

# If asked to just dump the URL, do that and exit.
if options.url:
    pscheduler.succeed(task_url)

print "Task URL is", task_url


#
# Get the first future run.
#

print "Fetching first run..."

tries = 40

runs_url = task_url + '/runs'

while tries > 0:
    tries -= 1
    # TODO: Get the whole thing once the API can expand the results.
    status, runs = pscheduler.url_get(
        runs_url,
        params={ 'limit': 1 }, throw=False )

    if status == 200 and len(runs) > 0:
            run_url = runs[0]
            break
    elif status == 200 or status == 404:
        time.sleep(0.25)
        continue
    else:
        pscheduler.fail("Failed to fetch run: " + runs)

if tries == 0:
    pscheduler.fail("Run on server was never populated.")

try:
    status, run_json = pscheduler.url_get(run_url)
except Exception as ex:
    pscheduler.fail("Failed to fetch run: " + str(ex))


#
# Wait for the run to finish
#

wait_time = pscheduler.time_until_seconds(
    pscheduler.iso8601_as_datetime(run_json['end-time']))

print "Waiting for the run to finish (%d seconds)..." % wait_time
time.sleep(wait_time)


# TODO: Once pscheduler-runner implements the cleanup/finished
# transition, query repeatedly for the task to become finished.  Maybe
# have a /tasks/x/runs/y?finished option in the API to camp on the
# database for a notification?

# TODO: Remove this when the above has been done.
print "Temporary wait for task cleanup.  Badger Mark about this until he fixes it..."
time.sleep(5)



#
# Get the final result
#

tries = 40

while tries > 0:
    tries -= 1
    status, result = pscheduler.url_get(run_url, throw=False)
    if status == 200:
        if result['result-merged'] is not None:
            break
        time.sleep(0.25)
    else:
        pscheduler.fail("Failed to fetch run: %d: %s" % (status, result))

if tries == 0:
    pscheduler.fail("Couldn't find full result.")


#
# Print the final result.
#

# TODO: If failed, dump diags.

for format in [ 'text/plain', 'text/html' ]:
    print
    print "Formatted %s:" % format

    # TODO: Use the helper server for this when supported.

    returncode, stdout, stderr = pscheduler.run_program(
        [ "pscheduler", "internal", "invoke", "test", test_type, "result-format", format ],
        stdin = pscheduler.json_dump(result['result-merged'])
        )

    if returncode == 0:
        print stdout.strip()
    else:
        pscheduler.fail("Failed to format test: " + stderr)

pscheduler.succeed()


