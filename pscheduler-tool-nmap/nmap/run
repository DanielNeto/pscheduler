#!/usr/bin/python

#
# Development Order #5:
#
# This is the meat and bones of the tool, where the actual desired
# commands or operation will be run. The results are then recorded
# and added to the 'results' JSON data, which will then be sent
# back to the test. Both system and api are able to be used here.
#

import datetime
import subprocess
import json
import sys
import time

import pscheduler

# from stdin
input = pscheduler.json_load(exit_on_error=True)

# Take input from test spec
try:
    ips = input['test']['spec']['ips']

except KeyError:
    pscheduler.fail('Missing data in input')

ips = input['test']['spec'].get('ips')
ports = input['test']['spec'].get('ports', None)
timeout_iso = input['test']['spec'].get('timeout', 'PT10S')
timeout = pscheduler.timedelta_as_seconds( pscheduler.iso8601_as_timedelta(timeout_iso) )
start_time = datetime.datetime.now()
succeeded = False
error = ''
diags = ''

# Run the actual task here:

if ports  == None:
    argv = [ 'nmap', '-oG', '-',  '-F', str(ips)]
    status, stdout, stderr = pscheduler.run_program(argv, timeout=timeout)

    if status:
        succeeded = False
        error = "Error returned: \n%s" % stderr.strip('\n')
    else:
        succeeded = True
        diags = stdout

else:
    argv = [ 'nmap', '-p', str(ports),  str(ips)]
    status, stdout, stderr = pscheduler.run_program(argv, timeout=timeout)

    if status:
        succeeded = False
        error = "Error returned: \n%s" % stderr.strip('\n')
    else:
        succeeded = True
        diags = stdout

end_time = datetime.datetime.now()

ports = ""

for section in diags.split("\t"):
    if "Ports" in section:
        ports += section.strip()

open_list = []

for item in ports.split(" "):
    if "open" in item:
        open_list.append(item)

port_nums = []
protocols = []
services = []

for port in open_list:
    #print([int(s) for s in port.split('/') if s.isdigit()])
    for n, identifier in enumerate(port.split('/')):
        if n == 0:
            port_nums.append(identifier)
        if n == 2:
            protocols.append(identifier)
        if n == 4:
            services.append(identifier)

port_data = "{ "

for num, protocol, service in zip(port_nums, protocols, services):
    port_data += "\""
    port_data += service
    port_data += "\""
    port_data += " : {"
    port_data += "\"number\": "
    port_data += "\""
    port_data += num 
    port_data += "\""
    port_data += ",\"protocol\": "
    port_data += "\"" 
    port_data += protocol 
    port_data += "\""
    port_data += "}, "   

data = port_data[:-2]
data += "}"

# Organize results into json data
results = {
    'succeeded': succeeded,
    'result': {
        'schema': 1,
        'time': pscheduler.timedelta_as_iso8601( end_time - start_time),
        'succeeded': succeeded,
	'ports-open': data
    }
}

pscheduler.succeed_json(results)

