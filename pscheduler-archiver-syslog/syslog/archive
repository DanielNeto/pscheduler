#!/usr/bin/python
#
# Send a result to syslog.
#

import pscheduler
import syslog

json = pscheduler.json_load(exit_on_error=True, max_schema=1)

errors = ()

try:
    ident = json['data']['ident']
except KeyError:
    ident = 'pScheduler'



facilities = {
    'kern': syslog.LOG_KERN,
    'user': syslog.LOG_USER,
    'mail': syslog.LOG_MAIL,
    'daemon': syslog.LOG_DAEMON,
    'auth': syslog.LOG_AUTH,
    'lpr': syslog.LOG_LPR,
    'news': syslog.LOG_NEWS,
    'uucp': syslog.LOG_UUCP,
    'cron': syslog.LOG_CRON,
    'syslog': syslog.LOG_SYSLOG,
    'local0': syslog.LOG_LOCAL0,
    'local1': syslog.LOG_LOCAL1,
    'local2': syslog.LOG_LOCAL2,
    'local3': syslog.LOG_LOCAL3,
    'local4': syslog.LOG_LOCAL4,
    'local5': syslog.LOG_LOCAL5,
    'local6': syslog.LOG_LOCAL6,
    'local7': syslog.LOG_LOCAL7
    }

try:
    facility_str = json['data']['facility']
except KeyError:
    facility_str = 'user'
try:
    facility = facilities[facility_str]
except KeyError:
    errors.append("Invalid facility")



priorities = {
    'emerg': syslog.LOG_EMERG,
    'alert': syslog.LOG_ALERT,
    'crit': syslog.LOG_CRIT,
    'err': syslog.LOG_ERR,
    'warning': syslog.LOG_WARNING,
    'notice': syslog.LOG_NOTICE,
    'info': syslog.LOG_INFO,
    'debug': syslog.LOG_DEBUG
    }

try:
    priority_str = json['data']['priority']
except KeyError:
    priority_str = 'info'
try:
    priority = priorities[priority_str]
except KeyError:
    errors.append("Invalid priority '%s'" % priority_str)

if errors:
    pscheduler.succeed_json({
        "succeeded": False,
        "error": '; '.join(errors)
    })


try:
    # Ident often comes in unicode and this requires a string.
    syslog.openlog(str(ident), 0, facility)

    result = json['result']
    if isinstance(result, basestring):
        # Post strings cleanly
        output = result
    else:
        # Anything else is JSON
        output = pscheduler.json_dump(json['result'])
    syslog.syslog(priority, output)
    syslog.closelog()
except Exception as ex:
    pscheduler.succeed_json({
        "succeeded": False,
        "error": "Failed to log result: %s" % str(ex)
    })


pscheduler.succeed_json({'succeeded': True})
