#!/usr/bin/python
#
# Run a test.  Just the test spec is provided on stdin.
#

import datetime
import json
import sys
import time

import pscheduler

# from stdin
input = pscheduler.json_load(exit_on_error=True)

try:
    version = input['test']['spec']['version']
    community = input['test']['spec']['community']
    dest = input['test']['spec']['dest']
    op = input['test']['spec']['op']
except KeyError:
    pscheduler.fail('Missing data in input')

timeout_iso = input['test']['spec'].get("timeout", "PT5S" )
timeout = pscheduler.timedelta_as_seconds( pscheduler.iso8601_as_timedelta(timeout_iso) )
start_time = datetime.datetime.now()

# Perform the test

error = None
argv = ['snmp' + str(op)]
for key in input['test']['spec'].keys():
    if key == 'version':
        argv.append('-v')
        argv.append(input['test']['spec'][key])
    if key == 'community':
        argv.append('-c')
        argv.append(input['test']['spec'][key])
    if key == 'dest':
        argv.append(input['test']['spec'][key].strip("/n"))

try:
    status, stdout, stderr = pscheduler.run_program(argv)
    succeeded = True
except Exception as e:
    pscheduler.succeed_json({"succeeded": False,
                             "error": "The snmp command failed during execution."
                            })

if status:
    pscheduler.succeed_json({"succeeded": False,
                                 "error": "snmp returned an error: %s" % stderr
                                 })

end_time = datetime.datetime.now()

#
# Produce results
#

results = {
    'succeeded': succeeded,
    'result': {
	    'schema': 1,
	    'duration': pscheduler.timedelta_as_iso8601( end_time - start_time ),
	    'succeeded' : succeeded,
        'data': stdout
    }
}

pscheduler.succeed_json(results)

